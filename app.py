# app.py (Vers√£o Final de Produ√ß√£o com Debug)
import streamlit as st
import os
import google.generativeai as genai
from dotenv import load_dotenv

# Imports para LangChain
from langchain_google_genai import GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI
from langchain_community.vectorstores import FAISS

# --- CONFIGURA√á√ÉO INICIAL DA P√ÅGINA E VARI√ÅVEIS DE AMBIENTE ---
st.set_page_config(page_title="Assistente Agrofel", page_icon="üåø", layout="wide")

# L√≥gica para carregar a chave de API de forma segura
load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    try:
        api_key = st.secrets["GOOGLE_API_KEY"]
    except (FileNotFoundError, KeyError):
        st.error("Chave de API do Google n√£o encontrada! Configure-a no arquivo .env ou nos segredos do Streamlit.")
        st.stop()
genai.configure(api_key=api_key)


# --- FUN√á√ïES DE L√ìGICA (BACKEND DA APLICA√á√ÉO) ---

@st.cache_resource(show_spinner="A carregar base de conhecimento...")
def carregar_base_conhecimento():
    """
    Carrega o √≠ndice FAISS pr√©-constru√≠do do reposit√≥rio.
    """
    CAMINHO_INDEX_FAISS = "faiss_index_agrofel"

    if not os.path.exists(CAMINHO_INDEX_FAISS):
        st.error(f"ERRO CR√çTICO: A base de conhecimento pr√©-constru√≠da ('{CAMINHO_INDEX_FAISS}') n√£o foi encontrada no reposit√≥rio.")
        return None, None

    try:
        embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
        db = FAISS.load_local(CAMINHO_INDEX_FAISS, embeddings, allow_dangerous_deserialization=True)
        llm = ChatGoogleGenerativeAI(model="gemini-1.5-pro-latest", temperature=0.4)
        return db, llm
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar a base de conhecimento: {e}")
        return None, None

def agente_especialista_recomenda(query: str, db, llm):
    """
    Usa a l√≥gica RAG de m√∫ltiplas etapas para encontrar e recomendar produtos.
    """
    if db is None or llm is None: return "Erro: A base de conhecimento n√£o est√° carregada."
    docs_relevantes = db.similarity_search(query, k=10)
    if not docs_relevantes: return "NAO_ENCONTRADO"
    contexto_bruto = "\n\n---\n\n".join([f"Chunk {i+1}:\n{doc.page_content}" for i, doc in enumerate(docs_relevantes)])
    prompt_filtragem = f"""Analise a PERGUNTA do usu√°rio e os seguintes CHUNKS de texto. Sua tarefa √© retornar APENAS o conte√∫do dos 3 chunks que s√£o MAIS RELEVANTES para responder √† pergunta, separados por '---'.\n\nPERGUNTA: "{query}"\n\nCHUNKS:\n{contexto_bruto}"""
    llm_filtro = ChatGoogleGenerativeAI(model="gemini-1.5-flash", temperature=0.0)
    contexto_filtrado = llm_filtro.invoke(prompt_filtragem).content
    prompt_geracao_final = f"""Voc√™ √© um consultor especialista da Agrofel. Com base nos TRECHOS RELEVANTES DAS BULAS, gere uma recomenda√ß√£o.\n\nPERGUNTA DO AGRICULTOR: "{query}"\n\nTRECHOS RELEVANTES DAS BULAS:\n---\n{contexto_filtrado}\n---\nINSTRU√á√ïES:\n1. Sugira at√© DOIS produtos. Se encontrar apenas um, sugira apenas um.\n2. Extraia o nome exato do produto e crie uma descri√ß√£o curta.\n3. Formato:\n   **Produto 1:** [Nome do Produto]\n   **Descri√ß√£o:** [Sua descri√ß√£o]\n4. Se os trechos n√£o forem suficientes, responda APENAS com: "NAO_ENCONTRADO"."""
    resposta_final = llm.invoke(prompt_geracao_final)
    return resposta_final.content

# --- O RESTANTE DO C√ìDIGO DA INTERFACE PERMANECE O MESMO ---

st.title("üåø Assistente de Campo Agrofel")

# --- PAINEL DE DEBUG NA BARRA LATERAL ---
with st.sidebar:
    st.header("Op√ß√µes de Desenvolvedor")
    if st.button("üö® Limpar Cache da Aplica√ß√£o"):
        st.cache_resource.clear()
        st.success("Cache limpo! A aplica√ß√£o ir√° recarregar a base de dados.")
        st.rerun()

st.markdown("Bem-vindo! Descreva seu problema com pragas na lavoura e encontrarei a melhor solu√ß√£o para voc√™.")

db, llm = carregar_base_conhecimento()

if 'recomendacao' not in st.session_state: st.session_state.recomendacao = ""
if 'pergunta' not in st.session_state: st.session_state.pergunta = ""

with st.form("pergunta_form"):
    pergunta_usuario = st.text_area("Qual praga est√° afetando sua lavoura e em qual cultura?", height=100, placeholder="Ex: Lagarta do cartucho no milho")
    submitted = st.form_submit_button("Buscar Sugest√µes")

if submitted and pergunta_usuario:
    if db is not None:
        with st.spinner("Analisando as melhores solu√ß√µes para voc√™..."):
            st.session_state.pergunta = pergunta_usuario
            recomendacao_gerada = agente_especialista_recomenda(pergunta_usuario, db, llm)
            st.session_state.recomendacao = recomendacao_gerada
    else:
        st.error("A base de conhecimento n√£o p√¥de ser carregada.")

if st.session_state.recomendacao:
    if "NAO_ENCONTRADO" in st.session_state.recomendacao:
        st.warning("N√£o encontrei produtos espec√≠ficos para sua solicita√ß√£o em nossa base de dados.")
        st.info("Gostaria de falar com um de nossos consultores para obter ajuda personalizada?")
        if st.button("Sim, solicitar contato de um especialista"):
            st.success("Sua solicita√ß√£o foi enviada! Um consultor Agrofel entrar√° em contato em breve.")
            st.session_state.recomendacao = ""
    else:
        st.subheader("Encontrei estas sugest√µes para voc√™:")
        st.markdown(st.session_state.recomendacao)
        st.markdown("---")
        st.markdown("O que voc√™ gostaria de fazer?")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úÖ Confirmar Pedido", type="primary", use_container_width=True):
                st.success("Pedido confirmado! Seu consultor Agrofel foi notificado.")
                st.balloons()
                st.session_state.recomendacao = ""
        with col2:
            if st.button("üó£Ô∏è Falar com um Humano", use_container_width=True):
                st.info("Sua solicita√ß√£o foi registrada. Um especialista entrar√° em contato.")
                st.session_state.recomendacao = ""
