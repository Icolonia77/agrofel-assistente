# app.py (Vers√£o Final com Agente de M√∫ltiplas Etapas)
import streamlit as st
import os
import smtplib
import json
from email.message import EmailMessage
from urllib.parse import quote

import google.generativeai as genai
from dotenv import load_dotenv

# Imports para LangChain
from langchain_google_genai import GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI
from langchain_community.vectorstores import FAISS
from langchain.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser

# --- CONFIGURA√á√ÉO INICIAL DA P√ÅGINA E VARI√ÅVEIS DE AMBIENTE ---
st.set_page_config(page_title="Assistente Agrofel", page_icon="üåø", layout="wide")

# L√≥gica para carregar a chave de API de forma segura
load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    try:
        api_key = st.secrets["GOOGLE_API_KEY"]
    except (FileNotFoundError, KeyError):
        st.error("Chave de API do Google n√£o encontrada! Configure-a no arquivo .env ou nos segredos do Streamlit.")
        st.stop()
genai.configure(api_key=api_key)


# --- FUN√á√ïES DE L√ìGICA (BACKEND DA APLICA√á√ÉO) ---

@st.cache_resource(show_spinner="A carregar base de conhecimento...")
def carregar_base_conhecimento():
    """
    Carrega o √≠ndice FAISS pr√©-constru√≠do do reposit√≥rio.
    """
    CAMINHO_INDEX_FAISS = "faiss_index_agrofel"
    if not os.path.exists(CAMINHO_INDEX_FAISS):
        st.error(f"ERRO CR√çTICO: A base de conhecimento pr√©-constru√≠da ('{CAMINHO_INDEX_FAISS}') n√£o foi encontrada.")
        return None, None
    try:
        embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
        db = FAISS.load_local(CAMINHO_INDEX_FAISS, embeddings, allow_dangerous_deserialization=True)
        llm = ChatGoogleGenerativeAI(model="gemini-1.5-pro-latest", temperature=0.3)
        return db, llm
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar a base de conhecimento: {e}")
        return None, None

def _analisar_pergunta(query: str, llm):
    """
    ETAPA 1: Agente de Triagem. Analisa a pergunta para extrair entidades.
    """
    template_analise = """
    Analise a pergunta de um agricultor. Extraia a CULTURA e a PRAGA.
    Para cada entidade, determine se √© ESPEC√çFICA (um nome concreto como 'soja', 'guanxuma') ou GEN√âRICA (uma palavra geral como 'praga', 'lavoura', 'veneno').
    Se uma entidade n√£o for mencionada, o seu valor deve ser null.
    Responda APENAS com um objeto JSON.

    Exemplos:
    Pergunta: "Qual produto pra tratar guanxuma?"
    JSON: {{"cultura": null, "tipo_cultura": null, "praga": "guanxuma", "tipo_praga": "ESPEC√çFICA"}}

    Pergunta: "Qual produto pra praga em planta√ß√£o de soja?"
    JSON: {{"cultura": "soja", "tipo_cultura": "ESPEC√çFICA", "praga": "praga", "tipo_praga": "GEN√âRICA"}}

    Pergunta: "{pergunta}"
    JSON:
    """
    prompt_analise = ChatPromptTemplate.from_template(template_analise)
    cadeia_analise = prompt_analise | llm | StrOutputParser()
    
    try:
        resultado_json = cadeia_analise.invoke({"pergunta": query})
        return json.loads(resultado_json)
    except (json.JSONDecodeError, Exception):
        # Fallback em caso de erro de parsing do JSON
        return {"cultura": query, "tipo_cultura": "ESPEC√çFICA", "praga": query, "tipo_praga": "ESPEC√çFICA"}


def _buscar_e_gerar_recomendacao(query: str, db, llm):
    """
    ETAPA 2 (se aplic√°vel): Executa o RAG com Transforma√ß√£o de Consulta.
    """
    # 2.1 Transforma√ß√£o da Consulta
    template_transformacao = """Voc√™ √© um especialista em agronomia. Sua tarefa √© transformar a pergunta de um utilizador numa lista de 3 consultas de busca otimizadas para uma base de dados vetorial.
    As consultas devem ser concisas e variadas para cobrir diferentes aspetos da pergunta.
    Responda apenas com as consultas, uma por linha.

    Pergunta Original: {pergunta}
    Consultas de Busca:
    """
    prompt_transformacao = ChatPromptTemplate.from_template(template_transformacao)
    cadeia_transformacao = prompt_transformacao | llm | StrOutputParser()
    consultas_geradas = cadeia_transformacao.invoke({"pergunta": query}).strip().split('\n')

    # 2.2 Busca Aumentada
    todos_chunks = []
    for consulta in consultas_geradas:
        todos_chunks.extend(db.similarity_search(consulta, k=3))
    unique_chunks = {doc.page_content: doc for doc in todos_chunks}.values()

    if not unique_chunks:
        return "NAO_ENCONTRADO"

    contexto_final = "\n\n---\n\n".join([doc.page_content for doc in unique_chunks])

    # 2.3 Gera√ß√£o da Resposta Final
    prompt_geracao_final = f"""Voc√™ √© um consultor especialista da Agrofel. Com base nos TRECHOS RELEVANTES DAS BULAS, gere uma recomenda√ß√£o clara e objetiva.
    PERGUNTA ORIGINAL DO AGRICULTOR: "{query}"
    TRECHOS RELEVANTES DAS BULAS:
    ---
    {contexto_final}
    ---
    INSTRU√á√ïES:
    1. Esforce-se para sugerir DOIS produtos distintos. Se for imposs√≠vel, sugira apenas um.
    2. Para cada produto, extraia o nome exato e crie uma descri√ß√£o curta e convincente.
    3. Formato:
       **Produto 1:** [Nome do Produto]
       **Descri√ß√£o:** [Sua descri√ß√£o]
       **Produto 2:** [Nome do Produto]
       **Descri√ß√£o:** [Sua descri√ß√£o]
    4. Se os trechos n√£o forem suficientes para nenhuma recomenda√ß√£o segura, responda APENAS com: "NAO_ENCONTRADO".
    """
    resposta_final = llm.invoke(prompt_geracao_final)
    return resposta_final.content

def obter_resposta_assistente(query: str, db, llm):
    """
    Orquestra o fluxo de trabalho do agente de m√∫ltiplas etapas.
    """
    analise = _analisar_pergunta(query, llm)
    
    cultura = analise.get("cultura")
    tipo_cultura = analise.get("tipo_cultura")
    praga = analise.get("praga")
    tipo_praga = analise.get("tipo_praga")

    # L√≥gica do Roteador
    if not cultura or not praga:
        return "Para que eu possa ajudar, preciso que a sua pergunta contenha tanto a **praga** como a **cultura** afetada. Por exemplo: 'Como tratar capim-amargoso na soja?'"
    
    if tipo_cultura == "GEN√âRICA" or tipo_praga == "GEN√âRICA":
        return f"A sua pergunta √© um pouco geral. Para uma recomenda√ß√£o precisa, por favor, tente ser mais espec√≠fico. Por exemplo, em vez de 'praga em {cultura}', tente 'lagarta em {cultura}' ou 'percevejo em {cultura}'."

    # Se a pergunta for espec√≠fica, executa o fluxo de busca
    return _buscar_e_gerar_recomendacao(query, db, llm)


# --- Fun√ß√µes de Notifica√ß√£o (permanecem as mesmas) ---
def enviar_email_confirmacao(pergunta, recomendacao):
    # ... (c√≥digo de envio de email aqui, sem altera√ß√µes)
    try:
        email_vendedor = st.secrets["EMAIL_VENDEDOR"]
        email_remetente = st.secrets["EMAIL_REMETENTE"]
        senha_remetente = st.secrets["SENHA_REMETENTE"]
    except (FileNotFoundError, KeyError):
        st.error("As credenciais de email n√£o est√£o configuradas nos segredos do Streamlit.")
        return
    corpo_email = f'<html><body><p>Ol√°,</p><p>Um cliente solicitou um pedido atrav√©s do <b>Assistente de Campo Agrofel</b>.</p><hr><h3>Detalhes da Solicita√ß√£o:</h3><p><b>Pergunta do Cliente:</b><br>{pergunta}</p><p><b>Produtos Sugeridos e Confirmados:</b></p><div style="background-color:#f0f0f0; border-left: 5px solid #4CAF50; padding: 10px;">{recomendacao.replace("**", "<b>").replace(chr(10), "<br>")}</div><br><p>Por favor, entre em contato com o cliente para dar seguimento.</p><p>Atenciosamente,<br>Assistente de Campo Agrofel</p></body></html>'
    msg = EmailMessage()
    msg['Subject'] = "Novo Pedido de Cliente - Assistente de Campo Agrofel"
    msg['From'] = email_remetente
    msg['To'] = email_vendedor
    msg.add_alternative(corpo_email, subtype='html')
    try:
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login(email_remetente, senha_remetente)
            smtp.send_message(msg)
        st.success("Pedido confirmado! Seu consultor Agrofel foi notificado por email.")
        st.balloons()
    except Exception as e:
        st.error(f"Ocorreu um erro ao enviar o email: {e}")

def gerar_link_whatsapp(pergunta, recomendacao):
    # ... (c√≥digo do link WhatsApp aqui, sem altera√ß√µes)
    numero_whatsapp = "5519989963385"
    texto_base = f"""Ol√°! Usei o Assistente de Campo Agrofel e gostaria de falar com um especialista.\n\nMinha pergunta foi: "{pergunta}"\n\nA recomenda√ß√£o foi:\n{recomendacao.replace('**', '')}\n\nAguardo contato."""
    texto_formatado = quote(texto_base)
    return f"https://wa.me/{numero_whatsapp}?text={texto_formatado}"


# --- INTERFACE DO USU√ÅRIO ---
st.title("üåø Assistente de Campo Agrofel")
st.markdown("Bem-vindo! Descreva seu problema com pragas na lavoura e encontrarei a melhor solu√ß√£o para voc√™.")

db, llm = carregar_base_conhecimento()

if 'recomendacao' not in st.session_state: st.session_state.recomendacao = ""
if 'pergunta' not in st.session_state: st.session_state.pergunta = ""

with st.form("pergunta_form"):
    pergunta_usuario = st.text_area("Qual praga est√° afetando sua lavoura e em qual cultura?", height=100, placeholder="Ex: Capim amargoso na soja")
    submitted = st.form_submit_button("Buscar Sugest√µes")

if submitted and pergunta_usuario:
    if db is not None:
        with st.spinner("Analisando as melhores solu√ß√µes para voc√™..."):
            st.session_state.pergunta = pergunta_usuario
            # A chamada principal agora √© para a fun√ß√£o orquestradora
            recomendacao_gerada = obter_resposta_assistente(pergunta_usuario, db, llm)
            st.session_state.recomendacao = recomendacao_gerada
    else:
        st.error("A base de conhecimento n√£o p√¥de ser carregada.")

if st.session_state.recomendacao:
    # A l√≥gica de exibi√ß√£o da resposta foi ligeiramente ajustada para o novo tipo de resposta informativa
    if "NAO_ENCONTRADO" in st.session_state.recomendacao:
        st.warning("N√£o encontrei produtos espec√≠ficos para sua solicita√ß√£o em nossa base de dados.")
        st.info("Gostaria de falar com um de nossos consultores para obter ajuda personalizada?")
        link_whatsapp_sem_produto = gerar_link_whatsapp(st.session_state.pergunta, "Nenhuma recomenda√ß√£o autom√°tica foi gerada.")
        st.link_button("üó£Ô∏è Falar com um Humano via WhatsApp", link_whatsapp_sem_produto, use_container_width=True)
    elif "Para que eu possa ajudar" in st.session_state.recomendacao or "A sua pergunta √© um pouco geral" in st.session_state.recomendacao:
        st.info(st.session_state.recomendacao) # Exibe a mensagem informativa pedindo mais detalhes
    else:
        # Exibe a recomenda√ß√£o de produtos como antes
        st.subheader("Encontrei estas sugest√µes para voc√™:")
        st.markdown(st.session_state.recomendacao)
        st.markdown("---")
        st.markdown("O que voc√™ gostaria de fazer?")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úÖ Confirmar Pedido", type="primary", use_container_width=True):
                enviar_email_confirmacao(st.session_state.pergunta, st.session_state.recomendacao)
                st.session_state.recomendacao = ""
        with col2:
            link_whatsapp_com_produto = gerar_link_whatsapp(st.session_state.pergunta, st.session_state.recomendacao)
            st.link_button("üó£Ô∏è Falar com um Humano via WhatsApp", link_whatsapp_com_produto, use_container_width=True)





