# app.py (Vers√£o com Perguntas de Aprofundamento)
import streamlit as st
import os
import re
import smtplib
from email.message import EmailMessage
from urllib.parse import quote

import google.generativeai as genai
from dotenv import load_dotenv

# Imports para LangChain e Pydantic
from langchain_google_genai import GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI
from langchain_community.vectorstores import FAISS
from langchain.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_core.pydantic_v1 import BaseModel, Field

# --- CONFIGURA√á√ÉO INICIAL DA P√ÅGINA E VARI√ÅVEIS DE AMBIENTE ---
st.set_page_config(page_title="Assistente Agrofel", page_icon="üåø", layout="wide")

# L√≥gica para carregar a chave de API de forma segura
load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    try:
        api_key = st.secrets["GOOGLE_API_KEY"]
    except (FileNotFoundError, KeyError):
        st.error("Chave de API do Google n√£o encontrada! Configure-a no arquivo .env ou nos segredos do Streamlit.")
        st.stop()
genai.configure(api_key=api_key)


# --- DEFINI√á√ÉO DA FERRAMENTA PARA AN√ÅLISE SEM√ÇNTICA ---
class AnalisePergunta(BaseModel):
    """Schema para analisar a pergunta de um agricultor."""
    cultura: str | None = Field(description="A cultura agr√≠cola mencionada, como 'soja' ou 'milho'. Inclui sin√¥nimos como 'planta√ß√£o', 'lavoura'. Null se n√£o mencionada.")
    praga: str | None = Field(description="A praga mencionada, como 'lagarta', 'guanxuma' ou 'ferrugem'. Inclui termos relacionados como 'doen√ßa', 'inseto', 'pat√≥geno'. Null se n√£o mencionada.")
    termo_produto: bool = Field(description="True se a pergunta mencionar termos como 'produto', 'veneno', 'tratamento' ou 'solu√ß√£o'.")


# --- FUN√á√ïES DE L√ìGICA (BACKEND DA APLICA√á√ÉO) ---

@st.cache_resource(show_spinner="A carregar base de conhecimento...")
def carregar_base_conhecimento():
    """ Carrega o √≠ndice FAISS pr√©-constru√≠do do reposit√≥rio. """
    CAMINHO_INDEX_FAISS = "faiss_index_agrofel"
    if not os.path.exists(CAMINHO_INDEX_FAISS):
        st.error(f"ERRO CR√çTICO: A base de conhecimento pr√©-constru√≠da ('{CAMINHO_INDEX_FAISS}') n√£o foi encontrada.")
        return None, None
    try:
        embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
        db = FAISS.load_local(CAMINHO_INDEX_FAISS, embeddings, allow_dangerous_deserialization=True)
        llm = ChatGoogleGenerativeAI(model="gemini-1.5-pro-latest", temperature=0.3)
        return db, llm
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar a base de conhecimento: {e}")
        return None, None

def _buscar_e_gerar_recomendacao(query: str, db, llm, aviso_contexto: str | None = None):
    """ Executa o fluxo de RAG com Transforma√ß√£o de Consulta. """
    template_transformacao = "Voc√™ √© um especialista em agronomia. Transforme a pergunta do utilizador em 3 consultas de busca concisas e variadas para uma base de dados vetorial. Responda apenas com as consultas, uma por linha.\n\nPergunta Original: {pergunta}\n\nConsultas de Busca:"
    prompt_transformacao = ChatPromptTemplate.from_template(template_transformacao)
    cadeia_transformacao = prompt_transformacao | llm | StrOutputParser()
    consultas_geradas = cadeia_transformacao.invoke({"pergunta": query}).strip().split('\n')
    
    todos_chunks = []
    for consulta in consultas_geradas:
        todos_chunks.extend(db.similarity_search(consulta, k=4))
    
    unique_chunks = {doc.page_content: doc for doc in todos_chunks}.values()
    if not unique_chunks: return "NAO_ENCONTRADO"

    contexto_final = "\n\n---\n\n".join([doc.page_content for doc in unique_chunks])
    
    aviso_prompt = f"{aviso_contexto}\n\n" if aviso_contexto else ""

    # INSTRU√á√ïES REVISTAS (mais flex√≠veis para informa√ß√µes parciais)
    prompt_geracao_final = f"""{aviso_prompt}Voc√™ √© um consultor especialista da Agrofel. Com base nos TRECHOS RELEVANTES DAS BULAS, gere uma recomenda√ß√£o clara e objetiva.

PERGUNTA ORIGINAL: "{query}"

TRECHOS RELEVANTES:
---
{contexto_final}
---

INSTRU√á√ïES:
1. Sugira produtos mesmo quando faltar cultura OU praga espec√≠fica
2. Para cada produto:
   - Extraia o NOME EXATO
   - Descreva brevemente sua aplica√ß√£o
   - Mencione pragas/culturas relevantes dos trechos
3. Se faltar informa√ß√£o:
   - Para cultura n√£o especificada: mencione "Verifique registro para sua cultura"
   - Para praga gen√©rica: sugira para pragas comuns
4. Formato:
   **Produto 1:** [Nome]
   **Aplica√ß√£o:** [Descri√ß√£o curta]
   **Indica√ß√µes:** [Pragas/Culturas relevantes]

   **Produto 2:** [Nome]
   **Aplica√ß√£o:** [Descri√ß√£o curta]
   **Indica√ß√µes:** [Pragas/Culturas relevantes]

5. Se n√£o encontrar produtos adequados, responda APENAS com: "NAO_ENCONTRADO"
6. NUNCA invente nomes de produtos ou informa√ß√µes t√©cnicas"""

    resposta_final = llm.invoke(prompt_geracao_final)
    return resposta_final.content

def buscar_resposta_especifica(produto: str, pergunta: str, db, llm):
    """
    Busca informa√ß√µes espec√≠ficas sobre um produto usando RAG aprimorado.
    """
    # Consulta combinando produto e pergunta
    query = f"{produto} {pergunta}"
    
    # Busca por similaridade com foco no produto
    docs = db.similarity_search(query, k=5, filter={"source": produto})
    if not docs:
        # Fallback: busca geral se n√£o encontrar com filtro
        docs = db.similarity_search(query, k=5)
    
    contexto = "\n\n---\n\n".join([doc.page_content for doc in docs])
    
    # Prompt especializado para perguntas t√©cnicas
    prompt = f"""
Voc√™ √© um assistente t√©cnico da Agrofel. Responda √† pergunta do usu√°rio baseando-se APENAS nas informa√ß√µes extra√≠das das bulas de produtos.

PRODUTO EM FOCO: {produto}
PERGUNTA: {pergunta}

INFORMA√á√ïES EXTRA√çDAS:
---
{contexto}
---

INSTRU√á√ïES:
1. Seja t√©cnico e preciso
2. Se a pergunta for sobre dosagem:
   - Forne√ßa a f√≥rmula de c√°lculo
   - D√™ exemplo para √°rea espec√≠fica
3. Se n√£o encontrar informa√ß√£o exata:
   - Indique "Informa√ß√£o n√£o dispon√≠vel"
   - Sugira consultar engenheiro agr√¥nomo
4. Formate a resposta de forma clara e organizada
5. NUNCA invente valores ou especifica√ß√µes t√©cnicas
"""
    resposta = llm.invoke(prompt)
    return resposta.content

def obter_resposta_assistente(query: str, db, llm):
    """
    Orquestra o fluxo de trabalho com Roteador Melhorado
    """
    # ETAPA 1: An√°lise Sem√¢ntica
    llm_com_ferramenta = llm.bind_tools([AnalisePergunta])
    analise = llm_com_ferramenta.invoke(query)
    
    # Fallback direto se an√°lise falhar
    if not analise.tool_calls:
        return _buscar_e_gerar_recomendacao(
            query, db, llm, 
            aviso_contexto="üîç Buscando solu√ß√µes para sua consulta..."
        )

    dados_analise = analise.tool_calls[0]['args']
    cultura = dados_analise.get("cultura")
    praga = dados_analise.get("praga")
    termo_produto = dados_analise.get("termo_produto", False)

    # ETAPA 2: Roteamento Inteligente
    aviso = None
    
    # Caso 1: Pergunta muito vazia
    if not praga and not cultura and not termo_produto:
        return "Por favor, descreva seu problema agr√≠cola. Ex: 'Preciso de produto para lagarta na soja' ou 'O que usar para ferrugem?'"
    
    # Caso 2: Men√ß√µes parciais com termo de produto
    if termo_produto:
        if praga and not cultura:
            aviso = f"üîç Buscando produtos para '{praga}'. Verifique o registro para sua cultura."
        elif cultura and not praga:
            aviso = f"üîç Buscando produtos recomendados para '{cultura}'. Especifique a praga para recomenda√ß√µes mais precisas."
        elif not praga and not cultura:
            aviso = "üîç Buscando produtos agr√≠colas gerais. Especifique cultura/praga para recomenda√ß√µes direcionadas."
    
    # Caso 3: Temos pelo menos um elemento relevante
    return _buscar_e_gerar_recomendacao(
        query, db, llm, 
        aviso_contexto=aviso
    )

# --- Fun√ß√µes de Notifica√ß√£o (mantidas) ---
def enviar_email_confirmacao(pergunta, recomendacao):
    try:
        email_vendedor, email_remetente, senha_remetente = st.secrets["EMAIL_VENDEDOR"], st.secrets["EMAIL_REMETENTE"], st.secrets["SENHA_REMETENTE"]
        corpo_email = f'<html><body><p>Ol√°,</p><p>Um cliente solicitou um pedido atrav√©s do <b>Assistente de Campo Agrofel</b>.</p><hr><h3>Detalhes da Solicita√ß√£o:</h3><p><b>Pergunta do Cliente:</b><br>{pergunta}</p><p><b>Produtos Sugeridos e Confirmados:</b></p><div style="background-color:#f0f0f0; border-left: 5px solid #4CAF50; padding: 10px;">{recomendacao.replace("**", "<b>").replace(chr(10), "<br>")}</div><br><p>Por favor, entre em contato com o cliente para dar seguimento.</p><p>Atenciosamente,<br>Assistente de Campo Agrofel</p></body></html>'
        msg = EmailMessage()
        msg['Subject'], msg['From'], msg['To'] = "Novo Pedido de Cliente - Assistente de Campo Agrofel", email_remetente, email_vendedor
        msg.add_alternative(corpo_email, subtype='html')
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login(email_remetente, senha_remetente)
            smtp.send_message(msg)
        st.success("Pedido confirmado! Seu consultor Agrofel foi notificado por email.")
        st.balloons()
    except Exception as e:
        st.error(f"Ocorreu um erro ao enviar o email: {e}")

def gerar_link_whatsapp(pergunta, recomendacao):
    numero_whatsapp = "5519989963385"
    texto_base = f"""Ol√°! Usei o Assistente de Campo Agrofel e gostaria de falar com um especialista.\n\nMinha pergunta foi: "{pergunta}"\n\nA recomenda√ß√£o foi:\n{recomendacao.replace('**', '')}\n\nAguardo contato."""
    texto_formatado = quote(texto_base)
    return f"https://wa.me/{numero_whatsapp}?text={texto_formatado}"

# --- FUN√á√ïES AUXILIARES PARA A INTERFACE ---
def extrair_nomes_produtos(recomendacao: str):
    """ Extrai os nomes dos produtos de uma string de recomenda√ß√£o. """
    padrao = r"\*\*Produto \d+:\*\* (.*?)\n"
    produtos = re.findall(padrao, recomendacao)
    return produtos

# --- INTERFACE DO USU√ÅRIO ---
st.title("üåø Assistente de Campo Agrofel")
st.markdown("Bem-vindo! Descreva seu problema com pragas na lavoura e encontrarei a melhor solu√ß√£o para voc√™.")

db, llm = carregar_base_conhecimento()

# Inicializa√ß√£o de estados da sess√£o
if 'recomendacao' not in st.session_state:
    st.session_state.recomendacao = ""
if 'pergunta' not in st.session_state:
    st.session_state.pergunta = ""
if 'produtos' not in st.session_state:
    st.session_state.produtos = []
if 'resposta_especifica' not in st.session_state:
    st.session_state.resposta_especifica = ""
if 'produto_selecionado' not in st.session_state:
    st.session_state.produto_selecionado = None
if 'pergunta_especifica' not in st.session_state:
    st.session_state.pergunta_especifica = ""

# Formul√°rio principal
with st.form("pergunta_form"):
    pergunta_usuario = st.text_area("Qual praga est√° afetando sua lavoura e em qual cultura?", height=100, placeholder="Ex: Guanxuma na soja ou 'Produto para lagarta'")
    submitted = st.form_submit_button("Buscar Sugest√µes")

if submitted and pergunta_usuario:
    if db is not None:
        with st.spinner("Analisando as melhores solu√ß√µes para voc√™..."):
            st.session_state.pergunta = pergunta_usuario
            recomendacao_gerada = obter_resposta_assistente(pergunta_usuario, db, llm)
            st.session_state.recomendacao = recomendacao_gerada
            # Extrai os nomes dos produtos para perguntas posteriores
            st.session_state.produtos = extrair_nomes_produtos(recomendacao_gerada) if "NAO_ENCONTRADO" not in recomendacao_gerada else []
    else:
        st.error("A base de conhecimento n√£o p√¥de ser carregada.")

# Exibi√ß√£o da recomenda√ß√£o principal
if st.session_state.recomendacao:
    if "NAO_ENCONTRADO" in st.session_state.recomendacao:
        st.warning("N√£o encontrei produtos espec√≠ficos para sua solicita√ß√£o em nossa base de dados.")
    else:
        st.subheader("Encontrei estas solu√ß√µes para voc√™:")
        st.markdown(st.session_state.recomendacao)
    
    # L√≥gica dos bot√µes de a√ß√£o
    st.markdown("---")
    if "NAO_ENCONTRADO" in st.session_state.recomendacao:
         st.info("Gostaria de falar com um de nossos consultores para obter ajuda personalizada?")
         link_whatsapp_sem_produto = gerar_link_whatsapp(st.session_state.pergunta, "Nenhuma recomenda√ß√£o autom√°tica foi gerada.")
         st.link_button("üó£Ô∏è Falar com um Humano via WhatsApp", link_whatsapp_sem_produto, use_container_width=True)
    else:
        st.markdown("O que voc√™ gostaria de fazer?")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úÖ Confirmar Pedido", type="primary", use_container_width=True):
                enviar_email_confirmacao(st.session_state.pergunta, st.session_state.recomendacao)
                st.session_state.recomendacao = ""
        with col2:
            link_whatsapp_com_produto = gerar_link_whatsapp(st.session_state.pergunta, st.session_state.recomendacao)
            st.link_button("üó£Ô∏è Falar com um Humano via WhatsApp", link_whatsapp_com_produto, use_container_width=True)

        # Se√ß√£o para perguntas espec√≠ficas sobre os produtos recomendados
        st.markdown("---")
        st.subheader("D√∫vidas t√©cnicas sobre os produtos?")
        st.markdown("Selecione um produto e fa√ßa sua pergunta para obter informa√ß√µes detalhadas.")
        
        # Seletor de produtos
        produto_selecionado = st.selectbox(
            "Selecione um produto:",
            st.session_state.produtos,
            index=0,
            key="produto_selector"
        )
        
        # Perguntas frequentes pr√©-definidas
        perguntas_frequentes = [
            "Como fa√ßo pra aplicar esse produto?",
            "Qual quantidade precisa pra 1 hectare?",
            "Esse produto afeta a lavoura?",
            "Quanto tempo ap√≥s a aplica√ß√£o posso fazer a colheita?",
            "Qual o modo de a√ß√£o do produto?",
            "Outra pergunta..."
        ]
        
        pergunta_rapida = st.selectbox(
            "Perguntas frequentes:",
            perguntas_frequentes,
            index=0,
            key="pergunta_rapida"
        )
        
        # Campo para perguntas personalizadas
        if pergunta_rapida == "Outra pergunta...":
            pergunta_personalizada = st.text_input("Fa√ßa sua pergunta personalizada:", placeholder="Ex: Posso misturar com outros produtos?")
        else:
            pergunta_personalizada = pergunta_rapida
        
        # Bot√£o para enviar pergunta espec√≠fica
        if st.button("Obter Resposta T√©cnica", type="secondary"):
            if produto_selecionado and pergunta_personalizada:
                with st.spinner("Buscando informa√ß√µes t√©cnicas..."):
                    st.session_state.produto_selecionado = produto_selecionado
                    st.session_state.pergunta_especifica = pergunta_personalizada
                    st.session_state.resposta_especifica = buscar_resposta_especifica(
                        produto_selecionado, 
                        pergunta_personalizada, 
                        db, 
                        llm
                    )
            else:
                st.warning("Selecione um produto e fa√ßa uma pergunta")

        # Exibir resposta da pergunta espec√≠fica
        if st.session_state.resposta_especifica:
            st.markdown("---")
            st.subheader(f"Resposta sobre {st.session_state.produto_selecionado}:")
            st.info(st.session_state.resposta_especifica)
            
            # Bot√£o para nova pergunta sobre o mesmo produto
            if st.button("Fazer outra pergunta sobre este produto", type="primary"):
                st.session_state.resposta_especifica = ""
                st.session_state.pergunta_especifica = ""
                st.experimental_rerun()